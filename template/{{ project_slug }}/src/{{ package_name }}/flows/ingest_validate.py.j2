from __future__ import annotations

from typing import Any, Dict

try:
    from prefect import flow, task  # type: ignore
except Exception:  # pragma: no cover
    def flow(fn):  # type: ignore
        return fn

    def task(fn):  # type: ignore
        return fn


from {{ package_name }}.project_config import get_settings


@task
def ingest() -> Dict[str, Any]:
    """Example ingest step.

    In real projects, read from files/DB/APIs. Here we just return a stub
    payload and let validation consult settings for thresholds.
    """

    # Example payload; replace with real ingestion
    return {"rows": 10}


@task
def validate(payload: Dict[str, Any]) -> bool:
    # Pydantic validation for the payload shape (optional)
    pydantic_available = True
    try:
        from pydantic import BaseModel, Field, ValidationError
    except Exception:  # pragma: no cover
        pydantic_available = False
        BaseModel = object  # type: ignore
        ValidationError = Exception  # type: ignore
        def Field(*args, **kwargs):  # type: ignore
            return None

    if pydantic_available:
        class IngestPayload(BaseModel):
            rows: int = Field(ge=0)

        try:
            IngestPayload(**payload)
        except ValidationError:
            return False

    # Optional Pandera validation if a DataFrame is provided under key "df"
    try:
        import pandas as pd  # type: ignore
        import pandera as pa  # type: ignore
    except Exception:  # pragma: no cover
        pd = None  # type: ignore
        pa = None  # type: ignore

    if pd is not None and pa is not None and isinstance(payload.get("df"), pd.DataFrame):
        df = payload["df"]
        # Minimal schema; extend as needed by the project
        schema = pa.DataFrameSchema({}, coerce=True)
        try:
            _ = schema.validate(df)
            # If rows is provided, ensure it matches the dataframe length
            if "rows" in payload and int(payload["rows"]) != len(df):
                return False
        except Exception:
            return False

    # Optional: use project settings thresholds for simple checks
    settings = get_settings()
    min_rows = settings.data.min_rows
    if isinstance(payload.get("rows"), int) and payload["rows"] < min_rows:
        return False

    return True


@flow(name="ingest-validate")
def ingest_validate_flow() -> bool:
    # Create settings once at the entrypoint. For small demos, tasks can
    # call get_settings() themselves; for larger pipelines, prefer passing
    # specific config values into tasks.
    _ = get_settings()  # ensures settings is initialized/cached
    data = ingest()
    return validate(data)


if __name__ == "__main__":
    print(ingest_validate_flow())
